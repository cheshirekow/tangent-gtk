// Generated by gmmproc 2.56.0 -- DO NOT MODIFY!
#ifndef _TANGENT_GTKUTIL_MM_PANZOOMAREA_H
#define _TANGENT_GTKUTIL_MM_PANZOOMAREA_H

#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// clang-format off
#include <gtkmm/drawingarea.h>

// clang-format on

#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkPanZoomArea = struct _GtkPanZoomArea;
using GtkPanZoomAreaClass = struct _GtkPanZoomAreaClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk {
class PanZoomArea_Class;
}  // namespace Gtk
#endif  // DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk {

class PanZoomArea : public Gtk::DrawingArea {
 public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef PanZoomArea CppObjectType;
  typedef PanZoomArea_Class CppClassType;
  typedef GtkPanZoomArea BaseObjectType;
  typedef GtkPanZoomAreaClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  PanZoomArea(PanZoomArea&& src) noexcept;
  PanZoomArea& operator=(PanZoomArea&& src) noexcept;

  // noncopyable
  PanZoomArea(const PanZoomArea&) = delete;
  PanZoomArea& operator=(const PanZoomArea&) = delete;

  ~PanZoomArea() noexcept override;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

 private:
  friend class PanZoomArea_Class;
  static CppClassType panzoomarea_class_;

 protected:
  explicit PanZoomArea(const Glib::ConstructParams& construct_params);
  explicit PanZoomArea(GtkPanZoomArea* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

 public:
  /** Get the GType for this class, for use with the underlying GObject type
   * system.
   */
  static GType get_type() G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

  static GType get_base_type() G_GNUC_CONST;
#endif

  /// Provides access to the underlying C GtkObject.
  GtkPanZoomArea* gobj() {
    return reinterpret_cast<GtkPanZoomArea*>(gobject_);
  }

  /// Provides access to the underlying C GtkObject.
  const GtkPanZoomArea* gobj() const {
    return reinterpret_cast<GtkPanZoomArea*>(gobject_);
  }

 public:
  // C++ methods used to invoke GTK+ virtual functions:

 protected:
  // GTK+ Virtual Functions (override these to change behaviour):

  // Default Signal Handlers::
  /// This is a default handler for the signal signal_area_motion().
  virtual bool on_area_motion(GdkEventMotion* event);
  /// This is a default handler for the signal signal_area_button().
  virtual bool on_area_button(GdkEventButton* event);
  /// This is a default handler for the signal signal_area_draw().
  virtual bool on_area_draw(const ::Cairo::RefPtr< ::Cairo::Context>& cr);

 private:
 public:
  PanZoomArea();

 public:
  // _WRAP_METHOD(void get_offset(double offset[2]),
  // gtk_panzoom_area_set_offset);

  // _WRAP_METHOD(void get_offset(double offset[2]),
  // gtk_panzoom_area_set_offset);

  double get_scale();
  ;

  void set_scale(double scale);
  ;

  double get_scale_rate();
  ;

  void set_scale_rate(double rate);
  ;

  // TODO(josh): can't wrap a signal whose default handler has a different
  // name than the name of the signal.

  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%area_motion(GdkEventMotion* event)</tt>
   *
   * Flags: Run Last
   *
   */

  Glib::SignalProxy<bool, GdkEventMotion*> signal_area_motion();
  ;

  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%area_button(GdkEventButton* event)</tt>
   *
   * Flags: Run Last
   *
   */

  Glib::SignalProxy<bool, GdkEventButton*> signal_area_button();
  ;

  // clang-format off
 

  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%area_draw(const ::Cairo::RefPtr< ::Cairo::Context>& cr)</tt>
   *
   * Flags: Run Last
   *
   */

  Glib::SignalProxy< bool,const ::Cairo::RefPtr< ::Cairo::Context>& > signal_area_draw();
;
  // clang-format on

  /** Adjustment defining the x-offset of the viewport.
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<Glib::RefPtr<Gtk::Adjustment> >
  property_offset_x_adjustment();

  /** Adjustment defining the x-offset of the viewport.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::RefPtr<Gtk::Adjustment> >
  property_offset_x_adjustment() const;
  ;
  /** Adjustment defining the y-offset of the viewport.
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<Glib::RefPtr<Gtk::Adjustment> >
  property_offset_y_adjustment();

  /** Adjustment defining the y-offset of the viewport.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::RefPtr<Gtk::Adjustment> >
  property_offset_y_adjustment() const;
  ;
  /** Adjustment defining the scale/zoom level of the viewport by defining the
   * length (in virtual units) of the longest edge.
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<Glib::RefPtr<Gtk::Adjustment> >
  property_scale_adjustment();

  /** Adjustment defining the scale/zoom level of the viewport by defining the
   * length (in virtual units) of the longest edge.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::RefPtr<Gtk::Adjustment> >
  property_scale_adjustment() const;
  ;
  /** Adjustment defining the multiplier used when changing the scale in
   * response to a button press. Zoom-in will multiply the scale by this value.
   * Zoom-out will divide.
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<Glib::RefPtr<Gtk::Adjustment> >
  property_scale_rate_adjustment();

  /** Adjustment defining the multiplier used when changing the scale in
   * response to a button press. Zoom-in will multiply the scale by this value.
   * Zoom-out will divide.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::RefPtr<Gtk::Adjustment> >
  property_scale_rate_adjustment() const;
  ;
  /** If true, captures mouse events for pan/zoom. If false, mouse events are
   * passed through.
   *
   * Default value: <tt>true</tt>
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<bool> property_active();

  /** If true, captures mouse events for pan/zoom. If false, mouse events are
   * passed through.
   *
   * Default value: <tt>true</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<bool> property_active() const;
  ;
  /** Which mouse button to monitor for pan tool.
   *
   * Default value: 3
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<int> property_pan_button();

  /** Which mouse button to monitor for pan tool.
   *
   * Default value: 3
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_pan_button() const;
  ;
  /** If true, then the default area-draw signal handler will draw some shapes
   * so that there is a point of reference for pan/zoom actions.
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy that allows you to get or set the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy<bool> property_demo_draw_enabled();

  /** If true, then the default area-draw signal handler will draw some shapes
   * so that there is a point of reference for pan/zoom actions.
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the
   * property, or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<bool> property_demo_draw_enabled() const;
  ;
};

}  // namespace Gtk

namespace Glib {
/** A Glib::wrap() method for this object.
 *
 * @param object The C instance.
 * @param take_copy False if the result should take ownership of the C instance.
 * True if it should take a new copy or ref.
 * @result A C++ instance that wraps this C instance.
 *
 * @relates Gtk::PanZoomArea
 */
Gtk::PanZoomArea* wrap(GtkPanZoomArea* object, bool take_copy = false);
}  // namespace Glib

#endif /* _TANGENT_GTKUTIL_MM_PANZOOMAREA_H */
